ARG TARGETPLATFORM
ARG BUILDPLATFORM
# Default release is 22.04
ARG TAG=latest
# Default base image 
ARG BASE_IMAGE=ubuntu
# BASE_IMAGE_RELEASE deprecated
ARG BASE_IMAGE_RELEASE=22.04

# ABCDESKTOP_LOCALACCOUNT_DIR arg
# use in ENV ABCDESKTOP_LOCALACCOUNT_DIR=$ABCDESKTOP_LOCALACCOUNT_DIR
# release >= 3.1 set value to "/etc/localaccount"
# release <  3.1 set value to "/var/secrets/abcdesktop/localaccount"
ARG ABCDESKTOP_LOCALACCOUNT_DIR
# ="/etc/localaccount"

# install all nodejs modules
# build nodejs module
# create /composer/node
# use FROM BASE_IMAGE
# define FROM before use ENV command
FROM ${BASE_IMAGE}:${TAG} as ubuntu_node_modules_builder

# define arg
ARG TARGET_MODE
# convert ARG to ENV with same name
ENV TARGET_MODE=$TARGET_MODE
ENV NODE_MAJOR=18

RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
RUN apt-get update && apt-get install -y  --no-install-recommends \
        gcc \
        g++ \
        make                        

# to make install wmctrljs nodejs components
# add build dev package 
RUN apt-get update && apt-get install -y  --no-install-recommends \
        ca-certificates \
        libx11-dev \
        libxmu-dev \
	libimlib2-dev \
        git \
        curl \
        gnupg \
        dpkg

# install yarn npm nodejs 
RUN  mkdir -p /etc/apt/keyrings && \
     curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
     echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && apt-get update && apt-get install -y --no-install-recommends nodejs && npm -g install yarn


COPY composer /composer

# add wait-port
WORKDIR /composer/node/wait-port 
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

# Add nodejs service
# yarn install --production[=true|false]
# yarn will not install any package listed in devDependencies if the NODE_ENV environment variable is set to production. 
# Use this flag to instruct Yarn to ignore NODE_ENV and take its production-or-not status from this flag instead.
# RUN git clone https://github.com/abcdesktopio/oc.user.libraries.git /composer/node/common-libraries
WORKDIR /composer/node/common-libraries
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

WORKDIR /composer/node/broadcast-service
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

# RUN git clone https://github.com/abcdesktopio/run-service.git /composer/node/ocrun
WORKDIR /composer/node/ocrun
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

WORKDIR /composer/node/ocdownload
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

WORKDIR /composer/node/occall
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

WORKDIR /composer/node/spawner-service/lib_spawner/colorflow
RUN yarn install --production=true

WORKDIR /composer/node/spawner-service
# install node-gyp to build spawner-service
RUN yarn global add node-gyp
RUN yarn install --production=true 
# && npm i --package-lock-only && npm audit fix

# WORKDIR /composer/node/xterm.js
RUN if [ "$TARGET_MODE" = "hardening" ] ; then \
        rm -rf /composer/node/xterm.js; \
        ls -la /composer/node; \
    else \
        cd /composer/node/xterm.js; \
        yarn install --production=true; \
        npm i --package-lock-only; \
        npm audit fix; \
        ls -la /composer/node/xterm.js; \
    fi

# version.json must be created by mkversion.sh bash script
COPY composer/version.json /composer/version.json





#
# The main oc.user start here
#
FROM ${BASE_IMAGE}:${TAG}

# define arg
ARG ABCDESKTOP_LOCALACCOUNT_DIR
ARG TARGET_MODE
# convert ARG to ENV with same name
ENV ABCDESKTOP_LOCALACCOUNT_DIR=$ABCDESKTOP_LOCALACCOUNT_DIR
ENV TARGET_MODE=$TARGET_MODE
# set node release
ENV NODE_MAJOR=18

COPY etc /etc
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections && \
    apt-get update  && \
    apt-get upgrade -y --no-install-recommends && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
	gnupg \
        net-tools \
        bash && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# add languages 
# locales for locale-gen command
RUN apt-get update && apt-get install -y --no-install-recommends \
	locales \
        language-pack-en \
        language-pack-fr \
        language-pack-de \
        && locale-gen \
        && apt-get clean \
        && rm -rf /var/lib/apt/lists/*

# install
# Do not use 
# COPY tigervncserver_1.13.1-1ubuntu1_amd64.deb /tmp to install
# tigervncserver_1.13.1-1ubuntu1_amd64.deb
# tigervncserver_1.13.1-1ubuntu1_arm64.deb    
# but replace by curl command to support dpkg --print-architecture for amd64 and arm64
RUN apt-get update  && \  
    tigervncdeburl="https://github.com/abcdesktopio/oc.user/raw/3.3/tigervncserver_1.13.1-1ubuntu1_$(dpkg --print-architecture).deb" && \
    echo Downloading $tigervncdeburl && \
    curl -sL --output /tmp/tigervncserver.deb "$tigervncdeburl" && \  
    apt-get install -y --no-install-recommends /tmp/tigervncserver.deb && \
    rm -f /tmp/*.deb && \
    apt-get clean && rm -rf /var/lib/apt/lists/* 



#  x11-xserver-utils
#    - xsetroot, a tool for tailoring the appearance of the root window;
#
RUN apt-get update && \    
    apt-get install -y --no-install-recommends \
        supervisor \
        wmctrl \
        cups-client \
        pulseaudio-utils \
        pavumeter \
        xauth \
        websockify \
	krb5-user \
	desktop-file-utils \
	xdg-user-dirs \
	x11-xserver-utils \
	adwaita-icon-theme \
	adwaita-qt \
	xclip \
	openbox \
	plank \	
    && apt-get clean && rm -rf /var/lib/apt/lists/*


# Uncommant lines to add picom compositor and watermarking support 
#
# to add compositor ( this option takes more memory in user's pod )
# picom need hsetroot 
# xsetroot is not supported by picom
#RUN apt-get update && \
#    apt-get install -y --no-install-recommends \
#	picom \
#	hsetroot && \
#    apt-get clean && \
#    rm -rf /var/lib/apt/lists/*
#

# install composer
COPY --from=ubuntu_node_modules_builder /composer /composer

# install nodejs
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends nodejs && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    node --version

#
# themes section
# copy themes from abcdesktopio/oc.themes
# COPY themes /usr/share/themes
# COPY --from=abcdesktopio/oc.themes      /usr/share/icons        /usr/share/icons
# COPY --from=abcdesktopio/oc.themes      /usr/share/themes       /usr/share/themes
# COPY --from=theme_builder /usr/share/themes /usr/share/themes
ADD Arc_OSXbuttons.tar /usr/share/themes	

# add sound files from ubuntu alsa package alsa-utils
ADD usr/share/sounds/alsa /usr/share/sounds/alsa

# LOG AND PID SECTION
RUN mkdir -p /var/log/desktop /var/run/desktop && chmod 777 /var/log/desktop /var/run/desktop

# remove /etc/supervisor/conf.d/xterm.conf in hardening
RUN if [ "${TARGET_MODE}" = "hardening" ] ; then rm -f /etc/supervisor/conf.d/xterm.conf; echo "supervisor xterm.conf has been removed"; fi

#
# create account balloon for compatility with 2.0
# Next command use $BUSER context
# this is the default user if no user defined
# create group, user, set password
# fix home dir owner
ENV BUSER balloon
RUN groupadd --gid 4096 $BUSER && \
    useradd --create-home --shell /bin/bash --uid 4096 -g $BUSER $BUSER && \
    echo "balloon:lmdpocpetit" | chpasswd $BUSER &&\
    chown -R $BUSER:$BUSER /home/$BUSER

# change passwd shadow group gshadow
RUN mkdir -p $ABCDESKTOP_LOCALACCOUNT_DIR && \
    for f in passwd shadow group gshadow ; do if [ -f /etc/$f ] ; then  cp /etc/$f $ABCDESKTOP_LOCALACCOUNT_DIR ; rm -f /etc/$f; ln -s $ABCDESKTOP_LOCALACCOUNT_DIR/$f /etc/$f; fi; done

# set build date
RUN date > /etc/build.date

# install qterminal xfonts-base
RUN if [ "${TARGET_MODE}" != "hardening" ]; then \
	apt-get update && \
	apt-get install -y --no-install-recommends qterminal xfonts-base && \
	apt-get clean && rm -rf /var/lib/apt/lists/*; \
    fi

# set command
CMD [ "/composer/docker-entrypoint.sh" ]

####################################################
# SERVICE                           #   TCP PORT   #
####################################################
# XTERM_TCP_PORT                        29781
# BROADCAST_SERVICE_TCP_PORT            29784
# SPAWNER_SERVICE_TCP_PORT              29786
# WS_TCP_BRIDGE_SERVICE_TCP_PORT         6081
# DBUS_SESSION_TCP_PORT                 55556
# DBUS_SYSTEM_TCP_PORT                  55557
####################################################

## RESERVED TCP PORT 29782 for pulseaudio
## RESERVED TCP PORT 29785 for cupsd

# VOLUME /home/$BUSER
# Set for compatibility 2.0
WORKDIR /home/$BUSER
USER $BUSER

EXPOSE 6081 29781 29784 29786
