ARG TARGETPLATFORM
ARG BUILDPLATFORM
# Default release is 22.04
ARG TAG
# Default base image 
ARG BASE_IMAGE=ubuntu
ARG BASE_IMAGE_RELEASE=24.04
# ABCDESKTOP_LOCALACCOUNT_DIR arg
# use in ENV ABCDESKTOP_LOCALACCOUNT_DIR=$ABCDESKTOP_LOCALACCOUNT_DIR
# release >= 3.1 set value to "/etc/localaccount"
# release <  3.1 set value to "/var/secrets/abcdesktop/localaccount"
ARG ABCDESKTOP_LOCALACCOUNT_DIR
# ="/etc/localaccount"
# only to build from nvidia image 
ARG CUDA_VERSION=12.4.1 


#
# create package for openbox
# deb files will be located in /root/packages/$(uname -m) directory 
# patched with openbox.title.patch for abcdesktop
# script run commands step by step 
# this dockerfile scetion is used to generate .deb file
# gnome-panel-control_3.6.1-12build5.1_amd64.deb  
# libobt2v5_3.6.1-12build5.1_amd64.deb    
# openbox-gnome-session_3.6.1-12build5.1_all.deb  
# openbox_3.6.1-12build5.1_amd64.deb
# libobrender32v5_3.6.1-12build5.1_amd64.deb      
# openbox-dev_3.6.1-12build5.1_amd64.deb  
# openbox-kde-session_3.6.1-12build5.1_all.deb
FROM ${BASE_IMAGE}:${BASE_IMAGE_RELEASE} as openbox_ubuntu_builder
ENV DEBEMAIL dev@abcdesktop.io
ENV EMAIL    dev@abcdesktop.io
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# add src in sources.list
# for <= 22.04
RUN if [ -f /etc/apt/sources.list ]; then sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list; fi
# for >= 24.04
RUN if [ -f /etc/apt/sources.list.d/ubuntu.sources ]; then sed -Ei 's/^Types: deb/Types: deb deb-src/' /etc/apt/sources.list.d/ubuntu.sources; fi
RUN if [ -f /etc/apt/sources.list.d/debian.sources ]; then sed -Ei 's/^Types: deb/Types: deb deb-src/' /etc/apt/sources.list.d/debian.sources; fi
RUN apt-get update
RUN apt-get install -y --no-install-recommends devscripts wget ca-certificates cmake
RUN apt-get build-dep -y openbox
RUN mkdir -p /openbox/src
WORKDIR /openbox
RUN apt-get source openbox
RUN wget https://raw.githubusercontent.com/abcdesktopio/openbox/main/openbox.title.patch
RUN cd openbox-3.6.1 && patch -p2 < ../openbox.title.patch
RUN cd openbox-3.6.1 && dch -n abcdesktop_sig_usr
RUN cd openbox-3.6.1 && EDITOR=/bin/true dpkg-source -q --commit . abcdesktop_sig_usr
RUN cd openbox-3.6.1 && debuild -us -uc
RUN ls *.deb


#
# create picom-11.2
#
FROM ${BASE_IMAGE}:${BASE_IMAGE_RELEASE} as picom_ubuntu_builder
ENV DEBEMAIL dev@abcdesktop.io
ENV EMAIL    dev@abcdesktop.io
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
# add src in sources.list
# for <= 22.04
RUN if [ -f /etc/apt/sources.list ]; then sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list; fi
# for >= 24.04
RUN if [ -f /etc/apt/sources.list.d/ubuntu.sources ]; then sed -Ei 's/^Types: deb/Types: deb deb-src/' /etc/apt/sources.list.d/ubuntu.sources; fi
RUN if [ -f /etc/apt/sources.list.d/debian.sources ]; then sed -Ei 's/^Types: deb/Types: deb deb-src/' /etc/apt/sources.list.d/debian.sources; fi
RUN apt-get update
RUN apt-get install -y --no-install-recommends cmake devscripts wget ca-certificates libconfig-dev libdbus-1-dev libegl-dev libev-dev libgl-dev libepoxy-dev libpcre2-dev libpixman-1-dev libx11-xcb-dev libxcb1-dev libxcb-composite0-dev libxcb-damage0-dev libxcb-dpms0-dev libxcb-glx0-dev libxcb-image0-dev libxcb-present-dev libxcb-randr0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-util-dev libxcb-xfixes0-dev libxext-dev meson ninja-build uthash-dev
RUN apt-get build-dep -y picom
RUN wget https://github.com/yshui/picom/archive/refs/tags/v11.2.tar.gz
RUN tar -xvf v11.2.tar.gz
WORKDIR /picom-11.2
RUN meson setup -Dcompton=false --buildtype=release build
RUN ninja -C build install



# install all nodejs modules
# build nodejs module
# create /composer/node
# use FROM BASE_IMAGE
# define FROM before use ENV command
FROM ${BASE_IMAGE}:${BASE_IMAGE_RELEASE} as ubuntu_node_modules_builder

# define arg
ARG TARGET_MODE
# convert ARG to ENV with same name
ENV TARGET_MODE=$TARGET_MODE
ENV NODE_MAJOR=18

RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
RUN apt-get update && apt-get install -y  --no-install-recommends \
        gcc \
        g++ \
        make                        

# to make install wmctrljs nodejs components
# add build dev package 
RUN apt-get update && apt-get install -y  --no-install-recommends \
        ca-certificates \
        libx11-dev \
        libxmu-dev \
	libimlib2-dev \
        git \
        curl \
        gnupg \
        dpkg

# install yarn npm nodejs 
RUN  mkdir -p /etc/apt/keyrings && \
     curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
     echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && apt-get update && apt-get install -y --no-install-recommends nodejs && npm -g install yarn


COPY composer /composer

# add wait-port
WORKDIR /composer/node/wait-port 
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

# Add nodejs service
# yarn install --production[=true|false]
# yarn will not install any package listed in devDependencies if the NODE_ENV environment variable is set to production. 
# Use this flag to instruct Yarn to ignore NODE_ENV and take its production-or-not status from this flag instead.
RUN git clone https://github.com/abcdesktopio/oc.user.libraries.git /composer/node/common-libraries
WORKDIR /composer/node/common-libraries
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

WORKDIR /composer/node/broadcast-service
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

RUN git clone https://github.com/abcdesktopio/run-service.git /composer/node/ocrun
WORKDIR /composer/node/ocrun
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

WORKDIR /composer/node/ocdownload
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

WORKDIR /composer/node/occall
RUN yarn install --production=true && npm i --package-lock-only && npm audit fix

WORKDIR /composer/node/spawner-service/lib_spawner/colorflow
RUN yarn install --production=true

WORKDIR /composer/node/spawner-service
# install node-gyp to build spawner-service
RUN yarn global add node-gyp
RUN yarn install --production=true 
# && npm i --package-lock-only && npm audit fix

# WORKDIR /composer/node/xterm.js
RUN if [ "$TARGET_MODE" = "hardening" ] ; then \
        rm -rf /composer/node/xterm.js; \
        ls -la /composer/node; \
    else \
        cd /composer/node/xterm.js; \
        yarn install --production=true; \
        npm i --package-lock-only; \
        npm audit fix; \
        ls -la /composer/node/xterm.js; \
    fi

# version.json must be created by mkversion.sh bash script
COPY composer/version.json /composer/version.json





#
# The main oc.user start here
#
FROM ${BASE_IMAGE}:${BASE_IMAGE_RELEASE}

# use bash
SHELL ["/bin/bash", "-c"]

# define arg
ARG ABCDESKTOP_LOCALACCOUNT_DIR
ARG TARGET_MODE
# convert ARG to ENV with same name
ENV ABCDESKTOP_LOCALACCOUNT_DIR=$ABCDESKTOP_LOCALACCOUNT_DIR
ENV TARGET_MODE=$TARGET_MODE
# set node release
ENV NODE_MAJOR=18

COPY etc /etc
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections && \
    apt-get update  && \
    apt-get upgrade -y --no-install-recommends && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
	gnupg \
        net-tools \
        bash && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# add languages 
# locales for locale-gen command
RUN apt-get update && apt-get install -y --no-install-recommends \
	locales \
        language-pack-en \
        language-pack-fr \
        language-pack-de \
        && locale-gen \
        && apt-get clean \
        && rm -rf /var/lib/apt/lists/*

# install
# Do not use 
# COPY tigervncserver_1.13.1-1ubuntu1_amd64.deb /tmp to install
# tigervncserver_1.13.1-1ubuntu1_amd64.deb
# tigervncserver_1.13.1-1ubuntu1_arm64.deb    
# but replace by curl command to support dpkg --print-architecture for amd64 and arm64
# tigervncserver_1.14.80-1ubuntu1_22.04_amd64.deb
ENV TIGERVNC_RELEASE=14.80
RUN apt-get update  && \
    source /etc/lsb-release && \
    echo DISTRIB_RELEASE=$DISTRIB_RELEASE && \
    tigervncdeburl="https://github.com/abcdesktopio/oc.user/raw/3.3/tigervncserver_1.$TIGERVNC_RELEASE-1ubuntu1_$DISTRIB_RELEASE_$(dpkg --print-architecture).deb" && \
    echo Downloading $tigervncdeburl && \
    curl -sL --output /tmp/tigervncserver.deb "$tigervncdeburl" && \  
    apt-get install -y --no-install-recommends /tmp/tigervncserver.deb && \
    rm -f /tmp/*.deb && \
    apt-get clean && rm -rf /var/lib/apt/lists/* 


# install core packages
RUN apt-get update && \    
    apt-get install -y --no-install-recommends -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
        supervisor \
        wmctrl \
        cups-client \
        pulseaudio-utils \
        pavumeter \
        xauth \
        websockify \
	krb5-user \
	desktop-file-utils \
	xdg-user-dirs \
	adwaita-icon-theme \
	adwaita-qt \
	xclip \
	libglib2.0-bin \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# install 3.3 packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        plank \
        xfdesktop4 \
        dbus-x11 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*


# install openbox custome packages 
RUN mkdir -p /tmp/packages
COPY --from=openbox_ubuntu_builder /openbox/libobt* /openbox/openbox_3.6.1* /openbox/libobrender* /tmp/packages/
RUN apt-get update  && \
        apt-get install -y --no-install-recommends -f /tmp/packages/*.deb  && \
    rm -rf /tmp/packages && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# install picom-11.2
COPY --from=picom_ubuntu_builder /picom-11.2/build/src/picom /usr/bin
COPY --from=picom_ubuntu_builder /picom-11.2/bin/picom-trans /usr/bin
COPY --from=picom_ubuntu_builder /picom-11.2/picom.desktop /usr/share/applications
RUN apt-get update  && \
    apt-get install -y --no-install-recommends \
          libdbus-1-3 libegl1  libev4t64 libgl1 libepoxy0 libpixman-1-0 libx11-xcb1 libxcb1 libxcb-composite0 libxcb-damage0 libxcb-dpms0 libconfig9 libxcb-glx0 libxcb-image0 libxcb-present0 libxcb-randr0 libxcb-render0 libxcb-render-util0 libxcb-shape0 libxcb-util1 libxcb-xfixes0 libxext6 libxcb-xinerama0 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

#
# Uncommant lines to add picom compositor and watermarking support 
#
# to add compositor ( this option takes more memory in user's pod )
# picom need hsetroot 
# xsetroot is not supported by picom
#RUN apt-get update && \
#    apt-get install -y --no-install-recommends \
#	picom \
#	hsetroot && \
#    apt-get clean && \
#    rm -rf /var/lib/apt/lists/*
#

# install composer
COPY --from=ubuntu_node_modules_builder /composer /composer

# install nodejs
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends nodejs && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    node --version

#
# themes section
# copy themes from abcdesktopio/oc.themes
# COPY themes /usr/share/themes
# COPY --from=abcdesktopio/oc.themes      /usr/share/icons        /usr/share/icons
# COPY --from=abcdesktopio/oc.themes      /usr/share/themes       /usr/share/themes
# COPY --from=theme_builder /usr/share/themes /usr/share/themes
ADD Arc_OSXbuttons.tar /usr/share/themes	

# add sound files from ubuntu alsa package alsa-utils
ADD usr/share/sounds/alsa /usr/share/sounds/alsa

# LOG AND PID SECTION
RUN mkdir -p /var/log/desktop /var/run/desktop && chmod 777 /var/log/desktop /var/run/desktop

# remove /etc/supervisor/conf.d/xterm.conf in hardening
RUN if [ "${TARGET_MODE}" = "hardening" ] ; then rm -f /etc/supervisor/conf.d/xterm.conf; echo "supervisor xterm.conf has been removed"; fi

#
# create account balloon for compatility with 2.0
# Next command use $BUSER context
# this is the default user if no user defined
# create group, user, set password
# fix home dir owner
ENV BUSER balloon
RUN groupadd --gid 4096 $BUSER && \
    useradd --create-home --shell /bin/bash --uid 4096 -g $BUSER $BUSER && \
    echo "balloon:lmdpocpetit" | chpasswd $BUSER &&\
    chown -R $BUSER:$BUSER /home/$BUSER

# change passwd shadow group gshadow
RUN mkdir -p $ABCDESKTOP_LOCALACCOUNT_DIR && \
    for f in passwd shadow group gshadow ; do if [ -f /etc/$f ] ; then  cp /etc/$f $ABCDESKTOP_LOCALACCOUNT_DIR ; rm -f /etc/$f; ln -s $ABCDESKTOP_LOCALACCOUNT_DIR/$f /etc/$f; fi; done

# set build date
RUN date > /etc/build.date

# install qterminal xfonts-base
RUN if [ "${TARGET_MODE}" != "hardening" ]; then \
	apt-get update && \
	apt-get install -y --no-install-recommends qterminal xfonts-base vim && \
	apt-get clean && rm -rf /var/lib/apt/lists/*; \
    fi

# set command
CMD [ "/composer/docker-entrypoint.sh" ]

####################################################
# SERVICE                           #   TCP PORT   #
####################################################
# XTERM_TCP_PORT                        29781
# BROADCAST_SERVICE_TCP_PORT            29784
# SPAWNER_SERVICE_TCP_PORT              29786
# WS_TCP_BRIDGE_SERVICE_TCP_PORT         6081
# DBUS_SESSION_TCP_PORT                 55556
# DBUS_SYSTEM_TCP_PORT                  55557
####################################################

## RESERVED TCP PORT 29782 for pulseaudio
## RESERVED TCP PORT 29785 for cupsd

# VOLUME /home/$BUSER
# Set for compatibility 2.0
WORKDIR /home/$BUSER
USER $BUSER

EXPOSE 6081 29781 29784 29786
